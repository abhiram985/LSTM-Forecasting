#youtubevs
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# === Simulated Dataset ===
np.random.seed(42)
df = pd.DataFrame({
    'early_views': np.random.randint(100, 10000, size=1000),
    'watch_time': np.random.uniform(1, 10, size=1000),
    'retention_rate': np.random.uniform(0.1, 0.9, size=1000),
    'comments': np.random.randint(0, 500, size=1000),
    'future_views': np.random.randint(1000, 200000, size=1000)
})

# === Feature Scaling ===
scaler_x = MinMaxScaler()
scaler_y = MinMaxScaler()

X = scaler_x.fit_transform(df[['early_views', 'watch_time', 'retention_rate', 'comments']])
y = scaler_y.fit_transform(df[['future_views']])

X = X.reshape((X.shape[0], 1, X.shape[1]))  # LSTM expects 3D input

# === Split Dataset ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === LSTM Model Architecture ===
model = Sequential([
    LSTM(64, activation='relu', input_shape=(X.shape[1], X.shape[2])),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1, verbose=1)

# === Prediction Example ===
sample_input = np.array([[5000, 7.5, 0.6, 120]])  # Replace with actual data
sample_scaled = scaler_x.transform(sample_input)
sample_scaled = sample_scaled.reshape((1, 1, 4))

predicted_scaled = model.predict(sample_scaled)
predicted_final = scaler_y.inverse_transform(predicted_scaled)

print(f"Predicted future views: {int(predicted_final[0][0])}")
