#farm vers
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# === Simulated Dataset ===
np.random.seed(42)
df = pd.DataFrame({
    'temperature': np.random.uniform(20, 40, size=1000),  # Â°C
    'rainfall': np.random.uniform(0, 100, size=1000),     # mm
    'humidity': np.random.uniform(30, 90, size=1000),     # %
    'soil_moisture': np.random.uniform(10, 60, size=1000),# %
    'water_use': np.random.uniform(100, 1000, size=1000)  # L/day (target)
})

# === Feature Scaling ===
scaler_x = MinMaxScaler()
scaler_y = MinMaxScaler()

X = scaler_x.fit_transform(df[['temperature', 'rainfall', 'humidity', 'soil_moisture']])
y = scaler_y.fit_transform(df[['water_use']])
X = X.reshape((X.shape[0], 1, X.shape[1]))  # LSTM expects 3D input

# === Train/Test Split ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === LSTM Model ===
model = Sequential([
    LSTM(64, activation='relu', input_shape=(X.shape[1], X.shape[2])),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)

# === Example Prediction ===
sample_input = np.array([[30.0, 25.0, 60.0, 35.0]])  # Example: warm day, some rain
sample_scaled = scaler_x.transform(sample_input).reshape((1, 1, 4))
predicted_scaled = model.predict(sample_scaled)
predicted_final = scaler_y.inverse_transform(predicted_scaled)

print(f"Predicted water use: {predicted_final[0][0]:.2f} liters/day")
